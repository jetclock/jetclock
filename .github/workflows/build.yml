name: Build Wails App for Raspberry Pi (ARM64)

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is_prerelease: ${{ steps.set-prerelease.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --tags

      - name: Fetch branch or PR commit
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            git fetch origin +refs/heads/${{ github.head_ref }}:refs/remotes/origin/${{ github.head_ref }}
            git checkout refs/remotes/origin/${{ github.head_ref }}
          else
            git checkout ${{ github.ref }}
          fi

      - id: get-version
        run: |
          version=$(git describe --always --dirty --tags | egrep -o '([0-9]+\.){1,2}[0-9]?[a-zA-Z0-9-]+')
          echo "version=$version" >> $GITHUB_ENV
          echo "version=$version" >> $GITHUB_OUTPUT
        shell: bash

      - id: set-prerelease
        run: |
          version="${{ steps.get-version.outputs.version }}"
          if [[ "$version" == *"-g"* ]] || [[ "$version" == *"-dirty"* ]]; then
            prerelease=true
          else
            prerelease=false
          fi
          echo "is_prerelease=$prerelease" >> $GITHUB_ENV
          echo "is_prerelease=$prerelease" >> $GITHUB_OUTPUT
        shell: bash

  build-arm64:
    needs: determine-version
    runs-on: ubuntu-latest #runs-on: ubuntu-22.04-arm
    env:
      GOPRIVATE: github.com/jetclock/*
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure Git to use Personal Access Token for private modules
        run: git config --global url."https://${{ secrets.GH_PAT_AW }}@github.com/".insteadOf "https://github.com/"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'


      - name: Enable ARM64 & install cross-compile & webkitgtk dev-libs
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
          qemu-user-static binfmt-support \
          gcc-aarch64-linux-gnu libc6-dev:arm64 \
          libgtk-3-dev:arm64 libwebkit2gtk-4.0-dev:arm64

#      - name: Install, git, GTK & WebKit deps
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev git

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install shell & build tools
        run: sudo apt-get update && sudo apt-get install -y bash coreutils build-essential

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Build Wails app
        run: |
          export PATH="$PATH:$(go env GOPATH)/bin"
          VERSION="${{ needs.determine-version.outputs.version }}"
          IS_PRERELEASE="${{ needs.determine-version.outputs.is_prerelease }}"
          echo "Building for ARM64 with version $VERSION (pre-release: $IS_PRERELEASE)"

          if [ "$IS_PRERELEASE" = "true" ]; then
            wails build -platform=linux/arm64 -debug -v 2 -ldflags "-X main.version=$VERSION"
          else
            wails build -platform=linux/arm64 -debug -v 2 -ldflags "-X main.version=$VERSION"
          fi

      - name: Upload built app
        uses: actions/upload-artifact@v4
        with:
          name: jetclock-${{ needs.determine-version.outputs.version }}-arm64
          path: build/bin/*
